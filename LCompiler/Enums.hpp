#pragma once

enum RegisterType
{
	REGISTER_TYPE_NA,
	REGISTER_TYPE_INTEGER,
	REGISTER_TYPE_LOGICAL,
	REGISTER_TYPE_STRING,
	REGISTER_TYPE_BYTE
};

enum IdClass
{
	ID_CLASS_NA,
	ID_CLASS_VAR,
	ID_CLASS_CONST
};

enum TokenType
{
	TOKEN_TYPE_DEFAULT,
	TOKEN_TYPE_TYPE,
	TOKEN_TYPE_COMMAND,
	TOKEN_TYPE_VALUE,
	TOKEN_TYPE_COMPARISSON,
	TOKEN_TYPE_CONSTANT
};

enum CharacterType
{
	CHAR_LOWERCASE_LETTER,
	CHAR_UPPERCASE_LETTER,
	CHAR_DIGIT,
	CHAR_SYMBOL,
	CHAR_EOF,
	CHAR_INVALID
};

enum LexicalState
{
	STATE_INITIAL,
	STATE_FINAL,
	STATE_IDL,
	STATE_ID_,
	STATE_SYMBOLS,
	STATE_STRING1,
	STATE_STRING2,
	STATE_INTEGER,
	STATE_HEX1,
	STATE_HEX2,
	STATE_HEX3,
	STATE_COMMENT1,
	STATE_COMMENT2,
	STATE_COMMENT3,
	STATE_DIFFERENT,
	STATE_INVALID_CHAR,
	STATE_INVALID_LEX
};

enum ReturnStatus
{
	NORMAL,
	INVALID_ARGUMENTS,
	LEXICAL_ERROR,
	SYNTACTIC_ERROR
};

enum Token
{
	TOKEN_BYTE,
	TOKEN_INTEGER,
	TOKEN_BOOLEAN,
	TOKEN_STRING,
	TOKEN_CONSTANT,
	TOKEN_WHILE,
	TOKEN_IF,
	TOKEN_ELSE,
	TOKEN_AND,
	TOKEN_OR,
	TOKEN_NOT,
	TOKEN_ATTRIBUTION,
	TOKEN_EQUALITY,
	TOKEN_LESS_THAN_OR_EQUAL,
	TOKEN_MORE_THAN_OR_EQUAL,
	TOKEN_DIFFERENT,
	TOKEN_LESS_THAN,
	TOKEN_MORE_THAN,
	TOKEN_OPENING_PARENTHESIS,
	TOKEN_CLOSING_PARENTHESIS,
	TOKEN_COMMA,
	TOKEN_PLUS,
	TOKEN_MINUS,
	TOKEN_MULTIPLY,
	TOKEN_DIVIDE,
	TOKEN_SEMICOLON,
	TOKEN_BEGIN,
	TOKEN_END,
	TOKEN_THEN,
	TOKEN_READLN,
	TOKEN_MAIN,
	TOKEN_WRITE,	
	TOKEN_WRITELN,
	TOKEN_ID,
	TOKEN_TRUE,
	TOKEN_FALSE,
	TOKEN_INTEGER_VALUE,
	TOKEN_HEXADECIMAL_VALUE,
	TOKEN_STRING_VALUE
};

std::string TokenDescription(Token token);

TokenType TokenToType(Token token);